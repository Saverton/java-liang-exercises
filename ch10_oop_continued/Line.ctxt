#BlueJ class context
comment0.target=Line
comment0.text=\r\n\ Class\ to\ define\ the\ Line\ object.\r\n\ \r\n\ @author\ Scott\ M.\r\n\ Line.java\r\n
comment1.params=p1\ p2
comment1.target=Line(Point,\ Point)
comment1.text=\r\n\ Constructor\ to\ make\ a\ line\ object\ with\ two\ specified\ endpoints.\r\n\ @params\ (first\ endpoint,\ instance\ of\ Point\ class)\ (second\ endpoint,\ instance\ of\ Point\ class)\r\n
comment10.params=l2
comment10.target=boolean\ segmentIntersects(Line)
comment10.text=\r\n\ Method\ to\ check\ if\ two\ line\ segments\ intersect\ one\ another.\r\n\ \r\n\ @params\ (line\ object\ to\ compare\ with\ for\ intersection)\r\n\ @return\ (true\:\ the\ line\ segments\ intersect,\ false\:\ the\ line\ segments\ don't\ intersect)\r\n
comment11.params=l2
comment11.target=boolean\ rayIntersects(Line)
comment11.text=\r\n\ Method\ to\ find\ if\ a\ ray\ from\ origin\ p1\ passing\ through\ p2\ intersects\ with\r\n\ another\ segment.\r\n\ \r\n\ @params\ (line\ object\ to\ check\ for\ intersection)\r\n\ @return\ (true\:\ the\ ray\ intersects\ the\ segment,\ false\:\ the\ ray\ doesn't\ intersect\r\n\ with\ the\ segment)\r\n
comment2.params=
comment2.target=Point\ getP1()
comment2.text=\r\n\ Method\ to\ get\ endpoint\ 1.\r\n\ @return\ (first\ endpoint)\r\n
comment3.params=
comment3.target=Point\ getP2()
comment3.text=\r\n\ Method\ to\ get\ endpoint\ 2.\r\n\ @return\ (second\ endpoint)\r\n
comment4.params=
comment4.target=double\ getLength()
comment4.text=\r\n\ Method\ to\ get\ length\ of\ the\ line\ segment\ from\ point\ 1\ to\ point\ 2.\r\n\ @return\ (distance\ between\ p1\ and\ p2,\ length\ of\ line\ segment)\r\n
comment5.params=
comment5.target=double\ getSlope()
comment5.text=\r\n\ Method\ to\ get\ the\ slope\ of\ the\ line.\r\n\ @return\ (slope\ of\ the\ line)\r\n
comment6.params=p3
comment6.target=boolean\ hasPoint(Point)
comment6.text=\r\n\ Method\ to\ check\ if\ a\ specific\ point\ is\ on\ the\ line.\r\n\ @params\ (point\ to\ be\ checked)\r\n\ @return\ (true\:\ point\ is\ on\ line,\ false\:\ point\ is\ not\ on\ line)\r\n
comment7.params=p3
comment7.target=boolean\ hasPointOnSegment(Point)
comment7.text=\r\n\ Method\ to\ check\ if\ a\ point\ is\ on\ the\ line\ segment\ from\ p1\ to\ p2.\r\n\ @params\ (point\ to\ be\ checked)\r\n\ @return\ (true\:\ point\ is\ on\ the\ line\ segment,\ false\:\ point\ is\ not\ on\ the\ segment)\r\n
comment8.params=p3
comment8.target=boolean\ hasPointOnRay(Point)
comment8.text=\r\n\ Method\ to\ check\ if\ a\ point\ is\ on\ the\ ray\ from\ p1\ through\ p2.\r\n\ \r\n\ @params\ (point\ to\ be\ checked)\r\n\ @return\ (true\:\ point\ is\ on\ the\ ray,\ false\:\ point\ is\ not\ on\ the\ ray)\r\n
comment9.params=l2
comment9.target=Point\ getIntersection(Line)
comment9.text=\r\n\ Method\ to\ check\ where/if\ this\ line\ segment\ intersects\ with\ another.\r\n\ @params\ (line\ to\ compare\ with\ for\ an\ intersection\ point)\r\n\ @return\ (Point\ of\ intersection,\ null\ if\ no\ intersection)\r\n
numComments=12
